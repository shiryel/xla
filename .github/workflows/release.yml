name: Release
on:
  push:
    branches:
      - 'main'
    #tags:
    #  - "v*.*.*"

jobs:
  create_draft_release:
    #if: github.ref_type == 'tag'
    permissions:
      contents: write
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - name: Create draft release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! gh release list | grep -q ${{ github.ref_name }}; then
            gh release create --title ${{ github.ref_name }} --draft ${{ github.ref_name }}
          fi

  linux_rocm:
    name: "x86_64-linux-gnu-${{ matrix.xla_target }}"
    needs: [create_draft_release]
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - container: rocm/dev-ubuntu-20.04:5.7-complete
            xla_target: rocm
            python: "3.9"
    container: ${{ matrix.container }}
    env:
      # This env is normally set by default, but we need to mirror it into the container
      # ourselves (used by the actions/setup-beam).
      ImageOS: ubuntu20
      # Set the missing UTF-8 locale, otherwise Elixir warns
      LC_ALL: C.UTF-8
      # Make sure installing packages (like tzdata) doesn't prompt for configuration
      DEBIAN_FRONTEND: noninteractive
      # Bazel Version
      USE_BAZEL_VERSION: 6.1.2
    steps:
      - name: Free more space
        run: |
          sudo docker rmi $(docker image ls -aq) >/dev/null 2>&1 || true
          sudo rm -rf \
            /usr/share/dotnet /usr/local/lib/android /opt/ghc \
            /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup \
            /usr/lib/jvm || true
          echo "some directories deleted"
          sudo apt install aptitude -y >/dev/null 2>&1
          sudo aptitude purge aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org azure-cli microsoft-edge-stable \
            -y -f >/dev/null 2>&1
          sudo aptitude purge google-cloud-sdk -f -y >/dev/null 2>&1
          sudo aptitude purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo apt purge microsoft-edge-stable -f -y >/dev/null 2>&1 || true
          sudo aptitude purge '~n ^mysql' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^php' -f -y >/dev/null 2>&1
          sudo aptitude purge '~n ^dotnet' -f -y >/dev/null 2>&1
          sudo apt-get autoremove -y >/dev/null 2>&1
          echo "Memory and swap:"
          sudo free -h
          echo
          sudo swapon --show
          echo
          echo "Available storage:"
          sudo df -h
          
      # The base images are minimalistic, so we bring a few necessary system packages
      - name: Install system packages
        run: |
          # We need to install "add-apt-repository" first
          apt-get update && apt-get install -y software-properties-common
          # Add repository with the latest git version for action/checkout to properly clone the repo
          add-apt-repository ppa:git-core/ppa
          # We run as root, so sudo is not necessary per se, but some actions (like setup-bazel) make use of it
          apt-get update && apt-get install -y ca-certificates curl git sudo unzip wget
          # Install Bazel using Bazelisk (works for both amd and arm)
          wget -O bazel "https://github.com/bazelbuild/bazelisk/releases/download/v1.18.0/bazelisk-linux-$(dpkg --print-architecture)"
          chmod +x bazel
          mv bazel /usr/local/bin/bazel
          # Install GitHub CLI used by our scripts
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          apt-get update && apt-get install -y gh

      # Prevent git from checking the repository owner and erroring with "dubious ownership"
      - run: git config --global --add safe.directory '*'
      # Proceed with the regular steps
      - uses: actions/checkout@v3
      - uses: erlef/setup-beam@v1
        with:
          otp-version: "24"
          elixir-version: "1.12.3"
      # Setup the compilation environment
      - uses: abhinavsingh/setup-bazel@v3
        with:
          version: "6.1.2"
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
        env:
          # Avoid permission errors for /github/home, in this case the directory
          # is used for pip cache and is not relevant either way
          HOME: /root
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the archive
      - run: mix deps.get
      - run: .github/scripts/compile_and_upload.sh ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: ${{ matrix.xla_target }}
